-- |Chapter 4 Exercises
halve :: [a]->([a],[a])
halve a | even (length a) == False = error "not possible"
          | even (length a) == True = (take (length a `div` 2) a, drop (length a `div` 2) a) 
		  | length a == 0 = error "not possible"
halvee :: [a] -> ([a],[a])
halvee a | even (length a) == False = error "not possible"
           | even (length a) == True = splitAt (length a `div` 2) a
-- | if then		   
safetail :: [a] -> [a]
safetail a = if length a == 0 then [] else tail a
-- | pattern matching
safetaill :: [a] -> [a]
safetaill [] = []
safetaill a = tail a

-- | guards
safetailll :: [a] -> [a]
safetailll a | null a == True = []
            |  null a == False = tail a
			
v :: Bool -> Bool -> Bool
v True _ = True
v False False = False
v _ True = True

w :: Bool -> Bool -> Bool
w a b = if a then a==b else False

g :: Bool -> Bool -> Bool
g a b = if a then b else False

mult :: Integer -> Integer -> Integer -> Integer
mult = \a -> \b -> \c -> a * b * c
